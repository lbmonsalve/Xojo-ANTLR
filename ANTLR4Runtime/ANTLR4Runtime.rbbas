#tag Module
Protected Module ANTLR4Runtime
	#tag Method, Flags = &h0
		Function AbsolutePathAntlr(Extends obj As FolderItem) As String
		  #if RBVersion< 2013
		    Return obj.AbsolutePath
		  #else
		    Return obj.NativePath
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub Assert(assertion As Boolean, Optional message As String)
		  If Not assertion Then
		    Dim exc As New RuntimeException
		    exc.Message= message
		    Raise exc
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function CountAntlr(Extends o() As Integer) As Integer
		  #if RBVersion< 2019.02
		    Return o.Ubound+ 1
		  #else
		    Return o.Count
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function CountAntlr(Extends o() As Object) As Integer
		  #if RBVersion< 2019.02
		    Return o.Ubound+ 1
		  #else
		    Return o.Count
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function GetException(msg As String, Optional errorNumber As Integer) As RuntimeException
		  Dim ret As New RuntimeException
		  ret.Message= msg
		  ret.ErrorNumber= errorNumber
		  
		  Return ret
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function LastIndexAntlr(Extends o() As Object) As Integer
		  #if RBVersion< 2019.02
		    Return o.Ubound
		  #else
		    Return o.LastIndex
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function LastIndexAntlr(Extends o() As String) As Integer
		  #if RBVersion< 2019.02
		    Return o.Ubound
		  #else
		    Return o.LastIndex
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function LastIndexAntlr(Extends o() As UInt16) As Integer
		  #if RBVersion< 2019.02
		    Return o.Ubound
		  #else
		    Return o.LastIndex
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ReadAllText(Extends file As FolderItem, fileEnc As TextEncoding) As String
		  Dim fileStream As BinaryStream
		  Dim text As String
		  
		  Try
		    
		    #pragma BreakOnExceptions Off
		    fileStream= BinaryStream.Open(file)
		    text= fileStream.Read(fileStream.Length, fileEnc)
		    #pragma BreakOnExceptions Default
		    
		  Catch exc As UnsupportedFormatException
		    System.DebugLog "UnsupportedFormatException in "+ CurrentMethodName
		  Catch exc As IOException
		    System.DebugLog "IOException in "+ CurrentMethodName
		  Finally
		    fileStream.Close
		  End Try
		  
		  Return text
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ResizeToAntlr(Extends o() As Object, newSize As Integer)
		  #if RBVersion< 2019.02
		    ReDim o(newSize)
		  #else
		    o.ResizeTo newSize
		  #endif
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ResizeToAntlr(Extends o() As UInt16, newSize As Integer)
		  #if RBVersion< 2019.02
		    ReDim o(newSize)
		  #else
		    o.ResizeTo newSize
		  #endif
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ResizeToAntlr(Extends o() As UInt64, newSize As Integer)
		  #if RBVersion< 2019.02
		    ReDim o(newSize)
		  #else
		    o.ResizeTo newSize
		  #endif
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ToCharArray(Extends o As String) As UInt16()
		  Dim ret() As UInt16
		  
		  For i As Integer= 1 To o.Len
		    ret.Append o.Mid(i, 1).Asc
		  Next
		  
		  Return ret
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ToString(Extends o() As UInt16, enc As TextEncoding) As String
		  Dim ret() As String
		  
		  For i As Integer= 0 To o.LastIndexAntlr
		    ret.Append enc.Chr(o(i))
		  Next
		  
		  Return DefineEncoding(Join(ret, ""), enc)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ToUInt32Array(Extends o As String) As UInt32()
		  Dim ret() As UInt32
		  
		  For i As Integer= 1 To o.Len
		    ret.Append o.Mid(i, 1).Asc
		  Next
		  
		  Return ret
		End Function
	#tag EndMethod


	#tag Note, Name = Readme
		
		# Xojo-ANTLR
		The Xojo ANTLR 4 runtime from the ANTLR Organization
		The runtime library for parsers generated by the Xojo target of the standard ANTLR 4 tool
		https://github.com/antlr/antlr4/blob/master/doc/index.md
	#tag EndNote


	#tag Constant, Name = kInvalidValue, Type = Double, Dynamic = False, Default = \"&h80000000", Scope = Public
	#tag EndConstant


	#tag Enum, Name = ATNType, Type = Integer, Flags = &h0
		Lexer
		Parser
	#tag EndEnum

	#tag Enum, Name = LexerActionType, Type = Integer, Flags = &h0
		Channel
		  Custom
		  Mode
		  More
		  PopMode
		  PushMode
		  Skip
		Type
	#tag EndEnum

	#tag Enum, Name = StateType, Type = Integer, Flags = &h0
		InvalidType
		  Basic
		  RuleStart
		  BlockStart
		  PlusBlockStart
		  StarBlockStart
		  TokenStart
		  RuleStop
		  BlockEnd
		  StarLoopBack
		  StarLoopEntry
		  PlusLoopBack
		LoopEnd
	#tag EndEnum


	#tag ViewBehavior
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InheritedFrom="Object"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			InheritedFrom="Object"
		#tag EndViewProperty
	#tag EndViewBehavior
End Module
#tag EndModule
